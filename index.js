const express = require('express');
const bodyParser = require('body-parser');
const loadJsonFile = require('load-json-file');
const jsdom = require("jsdom");
const iconv = require('iconv-lite');
const fs = require('fs');
const easyvk = require('easyvk');
const Readable = require('stream').Readable;
const nodemailer = require('nodemailer');
const LosslessJSON = require('lossless-json');
const fsPromises = require("fs/promises");

const VkBot = require('node-vk-bot-api');
const Markup = require('node-vk-bot-api/lib/markup');
const Session = require('node-vk-bot-api/lib/session');
const Scene = require('node-vk-bot-api/lib/scene');
const Stage = require('node-vk-bot-api/lib/stage');
const {
    response
} = require('express');

let input_file = loadJsonFile.sync('./input_params.json');

let token = input_file[0].token;
let sender = input_file[0].sender;
let password = input_file[0].password
let getter = input_file[0].getter
let service = input_file[0].service
const fileContents = fs.readFileSync(input_file[0].vacancies, 'utf8')
let obj = LosslessJSON.parse(fileContents);
let MANAGER_ID = Number(input_file[0].manager_id);
console.log("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");

setInterval(function () {
    token = input_file[0].token;
    sender = input_file[0].sender;
    password = input_file[0].password;
    getter = input_file[0].getter;
    service = input_file[0].service;
    obj = loadJsonFile.sync(input_file[0].vacancies);
    MANAGER_ID = Number(input_file[0].manager_id);
}, 300000);

const api_key = token
const bot = new VkBot(api_key);

let CHOOSEN_ID = 0;
let CHOOSEN_NAME = "";

const scene = new Scene('deal',
    (ctx) => {
        ctx.scene.next();
        ctx.reply('–¢–æ–≥–¥–∞ –ø—Ä–æ—â–∞—é—Å—å, –ø–∏—à–∏ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —è –µ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É.');
    },
    (ctx) => {
        ctx.session.from_id = ctx.message.from_id.toString()
        ctx.session.question = ctx.message.text;
        ctx.scene.leave()
        ctx.reply('–°–ø–∞—Å–∏–±–æ!\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–Ω–æ–≤–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º, –Ω–∞–ø–∏—à–∏ "–ù–∞—á–∞—Ç—å".');
        easyvk({
            token: api_key,
            utils: {
                longpoll: true
            }
        }).then(async vk => {

            const lpSettings = {
                forGetLongPollServer: {
                    lp_version: 3, // –ò–∑–º–µ–Ω—è–µ–º –≤–µ—Ä—Å–∏—é LongPoll, –≤ EasyVK –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ—Ä—Å–∏—è 2
                    need_pts: 1
                },
                forLongPollServer: {
                    wait: 15 // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ 15 —Å–µ–∫—É–Ω–¥
                }
            }

            async function getMessage(msgArray = []) {
                const MESSAGE_ID__INDEX = 1;

                return vk.call('messages.getById', {
                    message_ids: msgArray[MESSAGE_ID__INDEX]
                })
            }

            async function sendMessageToManager(user, random, peer, mess) {
                return vk.call("messages.send", {
                    user_id: user,
                    random_id: random,
                    peer_id: peer,
                    message: mess
                })
            }

            vk.longpoll.connect(lpSettings).then((lpcon) => {
                let flag = true;
                lpcon.on("message", async (msg) => {
                    let fullMessage = await getMessage(msg);
                    fullMessage = fullMessage.items[0]
                    while (flag) {
                        flag = false
                        await sendMessageToManager(MANAGER_ID, easyvk.randomId(), MANAGER_ID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å https://vk.com/id" + fullMessage.peer_id.toString() + " –æ–±—â–∞–ª—Å—è —Å –±–æ—Ç–æ–º –∏ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: \n\n" + ctx.message.text)
                    }
                })
            })
        })

        let transporter = nodemailer.createTransport({
            service: service,
            auth: {
                user: sender,
                pass: password,
            },
        })

        transporter.sendMail({
            from: '"–ß–∞—Ç-–±–æ—Ç "–í–∞–∫–∞–Ω—Å–∏–∏" <' + sender + '>',
            to: getter,
            subject: '–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å https://vk.com/id" + ctx.message.from_id.toString() + " –æ–±—â–∞–ª—Å—è —Å –±–æ—Ç–æ–º –∏ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: " + ctx.message.text,
            html: '<div>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <strong>https://vk.com/id' + ctx.message.from_id.toString() + ' </strong> –æ–±—â–∞–ª—Å—è —Å –±–æ—Ç–æ–º –∏ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:<br/><br/>'+ ctx.message.text +'</div>'
        })
    },
    (ctx) => {
        ctx.scene.next();
        ctx.session.from_id = ctx.message.from_id.toString()
        ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ—ë –§–ò–û.');
    },
    (ctx) => {

        if (ctx.message.text.split(' ').length < 2) {
            ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ—ë –§–ò–û (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è).');
        } else {
            ctx.session.fullname = ctx.message.text;

            ctx.scene.next();
            ctx.reply('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –ø–æ—á—Ç—É.');
        }
    },
    (ctx) => {

        let mail_tmp = ctx.message.text

        if (!mail_tmp.match(/^[\w]{1}[\w-\.]*@[\w-]+\.[a-z]{2,4}$/i)) {
            ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.');
        } else {
            ctx.session.email = ctx.message.text;

            ctx.scene.next();
            ctx.reply('–ï—â–µ —á—É—Ç—å-—á—É—Ç—å! –û—Å—Ç–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (11 —Ü–∏—Ñ—Ä –Ω–∞—á–∏–Ω–∞—è —Å 8, 7 –∏–ª–∏ +7).');
        }
    },
    (ctx) => {
        let number_tmp = ctx.message.text.toString()
        if (number_tmp[0] == '+' && number_tmp[1] == '7') {
            number_tmp = number_tmp.split('+').join('')
        }
        if (!Number.isInteger(Number(number_tmp)) || number_tmp.length != 11 || (number_tmp[0] != '7' && number_tmp[0] != '8') || number_tmp[1] != '9') {
            ctx.reply('–ù–æ–º–µ—Ä –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ (11 —Ü–∏—Ñ—Ä –Ω–∞—á–∏–Ω–∞—è —Å 8, 7 –∏–ª–∏ +7).');
        } else {
            ctx.session.number = ctx.message.text;

            ctx.scene.next();
            ctx.reply('–•–æ—á—É —É–∑–Ω–∞—Ç—å —Ç–µ–±—è –ø–æ–ª—É—á—à–µ! –ù–∞–ø–∏—à–∏ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –≤—Å–µ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –º–Ω–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é.');
        }

    },
    (ctx) => {
        ctx.session.description = ctx.message.text;
        ctx.reply('–¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –ß—Ç–æ —Ä–µ—à–∞–µ—à—å? –ü–æ—Å–º–æ—Ç—Ä–∏—à—å?', null, Markup
            .keyboard([
                Markup.button({
                    action: {
                        type: 'text',
                        label: '–•–æ—á—É –¢–ó!',
                        payload: JSON.stringify({
                            button: 'act1',
                        }),
                    },
                    color: 'positive',
                }),
                Markup.button({
                    action: {
                        type: 'text',
                        label: '–ù–µ —Ö–æ—á—É',
                        payload: JSON.stringify({
                            button: 'act1',
                        }),
                    },
                    color: 'negative',
                }),
                Markup.button({
                    action: {
                        type: 'text',
                        label: '–°—Ç–æ–ø',
                        payload: JSON.stringify({
                            button: 'act2',
                        }),
                    },
                    color: 'negative',
                }),
            ], {
                columns: 1
            }).oneTime());
        ctx.scene.leave();
    },
    (ctx) => {

        ctx.reply('–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–∫–æ—Ä–æ –ø—Ä–∏—à–ª—ë–º –Ω–∞ —Ç–≤–æ—é –ø–æ—á—Ç—É, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–∏ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞ üòâ\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–Ω–æ–≤–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º, –Ω–∞–ø–∏—à–∏ "–ù–∞—á–∞—Ç—å". –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç —Ç–µ–±–µ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.');

        easyvk({
            token: api_key,
            utils: {
                longpoll: true
            }
        }).then(async vk => {

            const lpSettings = {
                forGetLongPollServer: {
                    lp_version: 3,
                    need_pts: 1
                },
                forLongPollServer: {
                    wait: 15
                }
            }

            await vk.call("messages.send", {
                user_id: MANAGER_ID,
                random_id: easyvk.randomId(),
                peer_id: MANAGER_ID,
                message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å https://vk.com/id" + ctx.session.from_id + " –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ '" + ctx.session.choosen_name +
                    "'. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n–§–ò–û: " + ctx.session.fullname + "\nE-mail: " + ctx.session.email + "\n–¢–µ–ª–µ—Ñ–æ–Ω: " + ctx.session.number.toString() + "\n–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: " +
                    ctx.session.description
            })

            let transporter = nodemailer.createTransport({
                service: service,
                auth: {
                    user: sender,
                    pass: password,
                },
            })

            await transporter.sendMail({
                from: '"–ß–∞—Ç-–±–æ—Ç "–í–∞–∫–∞–Ω—Å–∏–∏" <' + sender + ">",
                to: getter,
                subject: '–ó–∞—è–≤–∫–∞ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ "' + ctx.session.choosen_name + '"',
                text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å https://vk.com/id" + ctx.session.from_id + " –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ '" + ctx.session.choosen_name +
                    "'. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n–§–ò–û: " + ctx.session.fullname + "\nE-mail: " + ctx.session.email + "\n–¢–µ–ª–µ—Ñ–æ–Ω: " + ctx.session.number.toString() + "\n–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: " +
                    ctx.session.description + "\n–ù–æ –≤ –≤—ã–≥—Ä—É–∑–∫–µ –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.",
                html: '<div>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <strong>https://vk.com/id' + ctx.session.from_id + ' </strong>–æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ <i>' + ctx.session.choosen_name + '</i>. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</div></br>' +
                    '<div> <strong>–§–ò–û: </strong>' + ctx.session.fullname + '</div></br>' +
                    '<div> <strong>E-mail: </strong>' + ctx.session.email + '</div></br>' +
                    '<div> <strong>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: </strong>' + ctx.session.number.toString() + '</div></br>' +
                    '<div> <strong>–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: </strong>' + ctx.session.description + '</div></br>'
            })
        })
        ctx.scene.leave();
    }
);

const session = new Session();
const stage_deal = new Stage(scene);

bot.use(session.middleware());
bot.use(stage_deal.middleware());

bot.command('–Ø –≤ –¥–µ–ª–µ!', (ctx) => {
    ctx.scene.enter('deal', 2);
});

bot.command('–•–æ—á—É –ø–æ–±–æ–ª—Ç–∞—Ç—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º!', ctx => {
    ctx.scene.enter('deal', 0);
});

bot.command('–•–æ—á—É –¢–ó!', (ctx) => {
    ctx.scene.enter('deal', 7);
});

bot.command(['/start', '–ù–∞—á–∞—Ç—å', 'start', 'Start', '–Ω–∞—á–∞—Ç—å', '–°—Ç–∞—Ä—Ç', '—Å—Ç–∞—Ä—Ç', '–í –Ω–∞—á–∞–ª–æ'], (ctx) => {
    ctx.reply('–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —è —Ä–∞—Å—Å–∫–∞–∂—É –ø—Ä–æ –≤–∞–∫–∞–Ω—Å–∏–∏.', null, Markup
        .keyboard([
            Markup.button({
                action: {
                    type: 'text',
                    label: '–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏!',
                    payload: JSON.stringify({
                        button: 'act1',
                    }),
                },
                color: 'primary',
            }),
            Markup.button({
                action: {
                    type: 'text',
                    label: '–•–æ—á—É –ø–æ–±–æ–ª—Ç–∞—Ç—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º!',
                    payload: JSON.stringify({
                        button: 'act2',
                    }),
                },
                color: 'primary',
            }),
            Markup.button({
                action: {
                    type: 'text',
                    label: '–°—Ç–æ–ø',
                    payload: JSON.stringify({
                        button: 'act2',
                    }),
                },
                color: 'negative',
            }),
        ], {
            columns: 1
        }).oneTime());
});

bot.command(['–Ø –ø–∞—Å', '–ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º –∫–∞–¥—Ä–æ–≤–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞'], async (ctx) => {

    fullarr = [];

    varArr = [];

    let varArr_reserved = [];

    let fullArr_reserved = [];

    for (let i = 0; i < obj.length; i++) {
        if (obj[i].is_reserve === true) {
            fullArr_reserved.push({
                id: obj[i].id.toString(),
                name: obj[i].name,
                is_reserve: obj[i].is_reserve,
                files: obj[i].files ? obj[i].files : null
            })

            varArr_reserved.push(
                Markup.button({
                    action: {
                        type: 'text', // –¢–∏–ø –∫–Ω–æ–ø–∫–∏
                        label: obj[i].name, // –¢–µ–∫—Å—Ç
                        payload: JSON.stringify({
                            button: 'act9',
                        }),
                    },
                    color: 'primary', // —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
                })
            )
        }
    }

    varArr_reserved.push(
        Markup.button({
            action: {
                type: 'text', // –¢–∏–ø –∫–Ω–æ–ø–∫–∏
                label: '–í –Ω–∞—á–∞–ª–æ', // –¢–µ–∫—Å—Ç
                payload: JSON.stringify({
                    button: 'wer', // –ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –µ—ë, –≤–∫ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç
                }),
            },
            color: 'positive', // —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        }),
        Markup.button({
            action: {
                type: 'text',
                label: '–°—Ç–æ–ø',
                payload: JSON.stringify({
                    button: 'act2',
                }),
            },
            color: 'negative',
        }),
    )

    for (let i = 0; i < fullArr_reserved.length; i++) {

        bot.command(fullArr_reserved[i].name, async ctx => {
            try {
                let IF_HTML = false;
                let HTML_POS = 0;
                for (let q = 0; q < fullArr_reserved[i].files.length; q++) {
                    if (fullArr_reserved[i].files[q].file_name.split(".")[1] == 'html') {
                        IF_HTML = true;
                        HTML_POS = q;
                    }
                }

                if (IF_HTML) {
                    let buff = Buffer.from(fullArr_reserved[i].files[HTML_POS].content.toString(), 'base64');

                    var output = iconv.decode(buff, "windows-1251").toString();

                    var span = new jsdom.JSDOM().window.document.createElement('span');

                    span.innerHTML = output;

                    span.innerHTML = span.innerHTML.replace(/\n{2,}/g, "\n\n");

                    span.innerHTML = span.innerHTML.replace(/\n\s/g, "\n");

                    let arr = span.innerHTML.split('');

                    for (let i = 1; i < arr.length - 1; i++) {
                        if (arr[i] == "\n" && arr[i - 1].match(/[\p{Alpha}\p{M}\p{Nd}\p{Pc}\p{Join_C}-]/gu) && arr[i + 1].match(/[\p{Alpha}\p{M}\p{Nd}\p{Pc}\p{Join_C}-]/gu)) {
                            arr[i] = " ";
                        }
                        if (arr[i] == "\n" && arr[i + 1].match(/\s{1}/g) || arr[i] == " " && arr[i + 1].match(/\n{1}/g)) {
                            arr[i + 1] = "";
                            i++;
                        }
                        if (arr[i] == " " && arr[i + 1] == " ") {
                            arr[i] = "";
                        }
                    }

                    span.innerHTML = arr.join('');

                    let VACATION_TEXT = span.textContent.split("-->")[1] != undefined ? span.textContent.split("-->")[1].trim() : span.textContent.trim()

                    await ctx.reply(VACATION_TEXT.toString());

                    ctx.session.choosen_id = fullArr_reserved[i].id;
                    ctx.session.choosen_name = fullArr_reserved[i].name;

                    await ctx.reply('–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏. –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ?', null, Markup
                        .keyboard([
                            Markup.button({
                                action: {
                                    type: 'text',
                                    label: '–Ø –≤ –¥–µ–ª–µ!',
                                    payload: JSON.stringify({
                                        button: 'act1',
                                    }),
                                },
                                color: 'positive',
                            }),
                            Markup.button({
                                action: {
                                    type: 'text',
                                    label: '–ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º –∫–∞–¥—Ä–æ–≤–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞',
                                    payload: JSON.stringify({
                                        button: 'act2',
                                    }),
                                },
                                color: 'primary',
                            }),
                            Markup.button({
                                action: {
                                    type: 'text',
                                    label: '–°—Ç–æ–ø',
                                    payload: JSON.stringify({
                                        button: 'act2',
                                    }),
                                },
                                color: 'negative',
                            }),
                        ], {
                            columns: 1
                        }).oneTime());
                } else {
                    await ctx.reply('–û–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç üòî', null, Markup
                        .keyboard([
                            Markup.button({
                                action: {
                                    type: 'text',
                                    label: '–í –Ω–∞—á–∞–ª–æ',
                                    payload: JSON.stringify({
                                        button: 'act1',
                                    }),
                                },
                                color: 'positive',
                            }),
                            Markup.button({
                                action: {
                                    type: 'text',
                                    label: '–°—Ç–æ–ø',
                                    payload: JSON.stringify({
                                        button: 'act2',
                                    }),
                                },
                                color: 'negative',
                            }),
                        ], {
                            columns: 1
                        }).oneTime());
                }

            } catch (e) {
                console.error(e);
            }
        });
    }
    try {
        await ctx.reply('–ñ–∞–ª—å. –ù–æ —É –º–µ–Ω—è –µ—Å—Ç—å –µ—â–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ç–µ–±—è! –ü—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞–¥—Ä–æ–≤–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞.', null, Markup
            .keyboard(varArr_reserved, {
                columns: 2
            }).oneTime(true));
    } catch (e) {
        console.error(e);
    }
})

bot.command(['–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏!', '–ù–∞–∑–∞–¥ –∫ –æ—Ç–∫—Ä—ã—Ç—ã–º –≤–∞–∫–∞–Ω—Å–∏—è–º'], async (ctx) => {

    let varArr = [];

    let fullArr = [];

    for (let i = 0; i < obj.length; i++) {

        if (obj[i].is_reserve === false) {
            fullArr.push({
                id: obj[i].id.toString(),
                name: obj[i].name,
                is_reserve: obj[i].is_reserve,
                files: obj[i].files ? obj[i].files : null
            })
            varArr.push(
                Markup.button({
                    action: {
                        type: 'text', // –¢–∏–ø –∫–Ω–æ–ø–∫–∏
                        label: obj[i].name, // –¢–µ–∫—Å—Ç
                        payload: JSON.stringify({
                            button: 'act3',
                        }),
                    },
                    color: 'primary', // —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
                })
            )
        }
    }

    varArr.push(
        Markup.button({
            action: {
                type: 'text', // –¢–∏–ø –∫–Ω–æ–ø–∫–∏
                label: '–Ø –ø–∞—Å', // –¢–µ–∫—Å—Ç
                payload: JSON.stringify({
                    button: 'wer', // –ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –µ—ë, –≤–∫ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç
                }),
            },
            color: 'negative', // —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        }),
        Markup.button({
            action: {
                type: 'text',
                label: '–°—Ç–æ–ø',
                payload: JSON.stringify({
                    button: 'act2',
                }),
            },
            color: 'negative',
        })
    )

    varArr.push(
        Markup.button({
            action: {
                type: 'text', // –¢–∏–ø –∫–Ω–æ–ø–∫–∏
                label: '–í –Ω–∞—á–∞–ª–æ', // –¢–µ–∫—Å—Ç
                payload: JSON.stringify({
                    button: 'wer', // –ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –µ—ë, –≤–∫ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç
                }),
            },
            color: 'positive', // —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        })
    )

    for (let i = 0; i < fullArr.length; i++) {
        bot.command(fullArr[i].name.toString(), async ctx => {
            try {

                let IF_HTML = false;
                let HTML_POS = 0;

                for (let q = 0; q < fullArr[i].files.length; q++) {
                    if (fullArr[i].files[q].file_name.split(".")[1] == 'html') {
                        IF_HTML = true;
                        HTML_POS = q;
                    }
                }

                if (IF_HTML) {
                    let buff = Buffer.from(fullArr[i].files[HTML_POS].content.toString(), 'base64');

                    var output = iconv.decode(buff, "windows-1251").toString();

                    var span = new jsdom.JSDOM().window.document.createElement('span');

                    span.innerHTML = output;

                    let arr = span.innerHTML.split('');

                    for (let i = 1; i < arr.length - 1; i++) {
                        if (arr[i] == "\n" && arr[i - 1].match(/[\p{Alpha}\p{M}\p{Nd}\p{Pc}\p{Join_C}-]/gu) && arr[i + 1].match(/[\p{Alpha}\p{M}\p{Nd}\p{Pc}\p{Join_C}-]/gu)) {
                            arr[i] = " ";
                        }
                        if (arr[i] == "\n" && arr[i + 1].match(/\s{1}/g)) {
                            arr[i + 1] = "";
                            i++;
                        }
                        if (arr[i] == " " && arr[i + 1].match(/\n{1}/g)) {
                            arr[i + 1] = "";
                            i++;
                        }
                        if (arr[i] == " " && arr[i + 1] == " ") {
                            arr[i] = "";
                        }
                    }

                    span.innerHTML = arr.join('');

                    span.innerHTML = span.innerHTML.replace(/\n{2,}/g, "\n\n");

                    span.innerHTML = span.innerHTML.replace(/\n\s/g, "\n");

                    ctx.session.choosen_id = fullArr[i].id;
                    ctx.session.choosen_name = fullArr[i].name;

                    let VACATION_TEXT = span.textContent.split("-->")[1] != undefined ? span.textContent.split("-->")[1].trim() : span.textContent.trim()

                    await ctx.reply(VACATION_TEXT.toString());

                    await ctx.reply('–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏. –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ?', null, Markup
                        .keyboard([
                            Markup.button({
                                action: {
                                    type: 'text',
                                    label: '–Ø –≤ –¥–µ–ª–µ!',
                                    payload: JSON.stringify({
                                        button: 'deal',
                                    }),
                                },
                                color: 'positive',
                            }),
                            Markup.button({
                                action: {
                                    type: 'text',
                                    label: '–ù–∞–∑–∞–¥ –∫ –æ—Ç–∫—Ä—ã—Ç—ã–º –≤–∞–∫–∞–Ω—Å–∏—è–º',
                                    payload: JSON.stringify({
                                        button: 'act2',
                                    }),
                                },
                                color: 'primary',
                            }),
                            Markup.button({
                                action: {
                                    type: 'text',
                                    label: '–°—Ç–æ–ø',
                                    payload: JSON.stringify({
                                        button: 'act2',
                                    }),
                                },
                                color: 'negative',
                            }),
                        ], {
                            columns: 1
                        }).oneTime());
                } else {
                    await ctx.reply('–û–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç :( –û–Ω–æ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è.', null, Markup
                        .keyboard([
                            Markup.button({
                                action: {
                                    type: 'text',
                                    label: '–í –Ω–∞—á–∞–ª–æ',
                                    payload: JSON.stringify({
                                        button: 'act1',
                                    }),
                                },
                                color: 'positive',
                            }),
                            Markup.button({
                                action: {
                                    type: 'text',
                                    label: '–°—Ç–æ–ø',
                                    payload: JSON.stringify({
                                        button: 'act2',
                                    }),
                                },
                                color: 'negative',
                            }),
                        ], {
                            columns: 1
                        }).oneTime());
                }

            } catch (e) {
                console.error(e);
            }
        });
    }

    try {
        await ctx.reply('–ö–ª–∞—Å—Å! –í–æ—Ç –Ω–∞—à–∏ –≤–∞–∫–∞–Ω—Å–∏–∏, –≤—ã–±–∏—Ä–∞–π –ø–æ–Ω—Ä–∞–≤–∏–≤—à—É—é—Å—è üòâ', null, Markup
            .keyboard(varArr, {
                columns: 2
            }).oneTime(true));

    } catch (e) {
        console.error(e);
    }

});

bot.command('–ù–µ —Ö–æ—á—É', async (ctx) => {
    await ctx.reply('–û—Ç–ª–∏—á–Ω–æ –ø–æ–æ–±—â–∞–ª–∏—Å—å! –£–¥–∞—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã.\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–Ω–æ–≤–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º, –Ω–∞–ø–∏—à–∏ "–ù–∞—á–∞—Ç—å". –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç —Ç–µ–±–µ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.');
    try {
        easyvk({
            token: api_key,
            utils: {
                longpoll: true
            }
        }).then(async vk => {

            await vk.call("messages.send", {
                user_id: MANAGER_ID,
                random_id: easyvk.randomId(),
                peer_id: MANAGER_ID,
                message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å https://vk.com/id" + ctx.session.from_id + " –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ '" + ctx.session.choosen_name +
                    "'. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n–§–ò–û: " + ctx.session.fullname + "\nE-mail: " + ctx.session.email + "\n–¢–µ–ª–µ—Ñ–æ–Ω: " + ctx.session.number.toString() + "\n–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: " +
                    ctx.session.description + "\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è."
            })

            let transporter = nodemailer.createTransport({
                service: service,
                auth: {
                    user: sender,
                    pass: password,
                },
            })

            await transporter.sendMail({
                from: '"–ß–∞—Ç-–±–æ—Ç "–í–∞–∫–∞–Ω—Å–∏–∏" <' + sender + ">",
                to: getter,
                subject: '–ó–∞—è–≤–∫–∞ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ "' + ctx.session.choosen_name + '"',
                text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å https://vk.com/id" + ctx.session.from_id + " –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ '" + ctx.session.choosen_name +
                    "'. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n–§–ò–û: " + ctx.session.fullname + "\nE-mail: " + ctx.session.email + "\n–¢–µ–ª–µ—Ñ–æ–Ω: " + ctx.session.number.toString() + "\n–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: " +
                    ctx.session.description + "\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–æ –≤—ã—Å–ª–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.",
                html: '<div>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <strong>https://vk.com/id' + ctx.session.from_id + ' </strong>–æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ <i>' + ctx.session.choosen_name + '</i>. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</div></br>' +
                    '<div> <strong>–§–ò–û: </strong>' + ctx.session.fullname + '</div></br>' +
                    '<div> <strong>E-mail: </strong>' + ctx.session.email + '</div></br>' +
                    '<div> <strong>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: </strong>' + ctx.session.number.toString() + '</div></br>' +
                    '<div> <strong>–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: </strong>' + ctx.session.description + '</div></br>' +
                    '<div>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.</strong> </div>'
            })
        })
    } catch (e) {
        console.error(e);
    }
})

bot.command(['/stop', 'Stop', 'stop', '–°—Ç–æ–ø', '—Å—Ç–æ–ø'], async (ctx) => {
    await ctx.reply('–î–æ —Å–∫–æ—Ä–æ–≥–æ! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–Ω–æ–≤–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º, –Ω–∞–ø–∏—à–∏ "–ù–∞—á–∞—Ç—å". –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç —Ç–µ–±–µ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.')
})

bot.startPolling((error) => {
    if (error) {
        console.error(error);
    } else {
        console.log("Bot started.");
    }
})